<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAMXA2OTNvNlUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAADNvNlUzcTaqNHE3/zRxN/8zcTaqM3E2qjRwN+M0cTf/M3E2xzNwNnIsajUdAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAADNvNlU0cDfjM3E2xzNwNnIsajUdAAAAAAAAAAAAAAAAAAAAAAAAAAAzbzZVNG82jjRx
        N/80bzaOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAzcTaqNHA34zRsNDsAAAAFAAAACBcuFwsSNxIOETMRDxEzEQ8SNxIOFDsUDQAA
        AAkAAAAGMWsxHzNwNqs0cDfjLGo1HQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        NlUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAsajUdM3E2qjRwN+MzcDZyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxcDY5M3E2xzRw
        N+MxcDY5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAMXA2OTNxNqo0cTf/M3E2qjRvNo4zbzZVM282VTNwNnIzcTaqNHA34zRw
        N+MzcDZyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzbzZVM282VTNxNqozcTaqM3A2cjNv
        NlUsajUdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////////////n///+AD//+D4f//GBh//gAAP/yAAR/5wACf+cAAz/P4
        D8/zgAHn54AB5+YAAGfkAAAn5GAGN+eAAffngAHn54AB5/MduOfzHDjP8Rw4z/n+f4/8+B8f/HgeP/44
        HH//D/D//8AD///4D/////////////////8=
</value>
  </data>
</root>